
lcdkeypadmotorinterface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000352  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000352  000003c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000007d  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005ed  00000000  00000000  00000469  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000175  00000000  00000000  00000a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004f7  00000000  00000000  00000bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000133  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000329  00000000  00000000  00001287  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
  8a:	0c 94 a7 01 	jmp	0x34e	; 0x34e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_command>:
 	lcd_command(0x28);    // 4 bit mode 2 line, 5x7 dots
 	lcd_command(0x06);    // enter mode/ auto increment mode//
	lcd_command(0x0c);    // display on cursor off
}
void lcd_command(unsigned char com)              //com=command to be used/user defined function//com=0x02
	{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	28 bb       	out	0x18, r18	; 24
	lcd = com & 0xF0;		//send higher bit/D4-D7/data pin

	lcd &= ~(1<<rs); 		//rs =0/compliment 0f 0=1/command mode
  98:	c2 98       	cbi	0x18, 2	; 24
	lcd |=(1<<en);			//en =1/en=enable,
  9a:	c3 9a       	sbi	0x18, 3	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9c:	20 ed       	ldi	r18, 0xD0	; 208
  9e:	37 e0       	ldi	r19, 0x07	; 7
  a0:	f9 01       	movw	r30, r18
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <lcd_command+0x10>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0/forsending higher bit
  a6:	c3 98       	cbi	0x18, 3	; 24
  a8:	f9 01       	movw	r30, r18
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_command+0x18>
	_delay_ms(1);

	lcd = (com<<4) & 0xF0;	//send lower bit
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	44 e0       	ldi	r20, 0x04	; 4
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	4a 95       	dec	r20
  b8:	e1 f7       	brne	.-8      	; 0xb2 <lcd_command+0x20>
  ba:	88 bb       	out	0x18, r24	; 24

	lcd &= ~(1<<rs); 		//rs =0
  bc:	c2 98       	cbi	0x18, 2	; 24
	lcd |=(1<<en);			//en =1
  be:	c3 9a       	sbi	0x18, 3	; 24
  c0:	c9 01       	movw	r24, r18
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_command+0x30>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
  c6:	c3 98       	cbi	0x18, 3	; 24
  c8:	c9 01       	movw	r24, r18
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_command+0x38>
	_delay_ms(1);
	}
  ce:	08 95       	ret

000000d0 <lcd_init>:
#define D6 PB6
#define D7 PB7


void lcd_init()
{
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x02);    // home position/test cursor wiill set on initial position
 	lcd_command(0x28);    // 4 bit mode 2 line, 5x7 dots
  d8:	88 e2       	ldi	r24, 0x28	; 40
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 	lcd_command(0x06);    // enter mode/ auto increment mode//
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x0c);    // display on cursor off
  e8:	8c e0       	ldi	r24, 0x0C	; 12
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
  f0:	08 95       	ret

000000f2 <lcd_data>:
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
	_delay_ms(1);
	}
void lcd_data(unsigned char value)
	{
  f2:	28 2f       	mov	r18, r24
  f4:	20 7f       	andi	r18, 0xF0	; 240
  f6:	28 bb       	out	0x18, r18	; 24

	lcd =value & 0xF0;		//send higher bit

	lcd |= (1<<rs); 		//rs =1
  f8:	c2 9a       	sbi	0x18, 2	; 24
	lcd |=(1<<en);			//en =1
  fa:	c3 9a       	sbi	0x18, 3	; 24
  fc:	20 ed       	ldi	r18, 0xD0	; 208
  fe:	37 e0       	ldi	r19, 0x07	; 7
 100:	f9 01       	movw	r30, r18
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_data+0x10>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
 106:	c3 98       	cbi	0x18, 3	; 24
 108:	f9 01       	movw	r30, r18
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_data+0x18>
	_delay_ms(1);


	lcd =(value<<4) & 0xF0;	//send lower bit
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	54 e0       	ldi	r21, 0x04	; 4
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	5a 95       	dec	r21
 118:	e1 f7       	brne	.-8      	; 0x112 <lcd_data+0x20>
 11a:	88 bb       	out	0x18, r24	; 24

	lcd |= (1<<rs); 		//rs =1
 11c:	c2 9a       	sbi	0x18, 2	; 24
	lcd |=(1<<en);			//en =1
 11e:	c3 9a       	sbi	0x18, 3	; 24
 120:	c9 01       	movw	r24, r18
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_data+0x30>
	_delay_ms(1);
	lcd &= ~(1<<en);		//en =0
 126:	c3 98       	cbi	0x18, 3	; 24
 128:	c9 01       	movw	r24, r18
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_data+0x38>
	_delay_ms(1);
	}
 12e:	08 95       	ret

00000130 <lcd_clear>:


void lcd_clear(void)
{
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 136:	80 ed       	ldi	r24, 0xD0	; 208
 138:	97 e0       	ldi	r25, 0x07	; 7
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_clear+0xa>
lcd_command(0x01);//predifined to clear lcd command
_delay_ms(1);
}
 13e:	08 95       	ret

00000140 <lcd_string>:



void lcd_string(char *str)//pointer
{
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24
 148:	10 e0       	ldi	r17, 0x00	; 0
 14a:	03 c0       	rjmp	.+6      	; 0x152 <lcd_string+0x12>
	char i=0;//length of data
	while(str[i]!='\0')//for incrimenting the data one by one untill null is found out
	{
	lcd_data(str[i]);//for incrimenting the data one by one untill null is found out
 14c:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
	i++;
 150:	1f 5f       	subi	r17, 0xFF	; 255


void lcd_string(char *str)//pointer
{
	char i=0;//length of data
	while(str[i]!='\0')//for incrimenting the data one by one untill null is found out
 152:	fe 01       	movw	r30, r28
 154:	e1 0f       	add	r30, r17
 156:	f1 1d       	adc	r31, r1
 158:	80 81       	ld	r24, Z
 15a:	88 23       	and	r24, r24
 15c:	b9 f7       	brne	.-18     	; 0x14c <lcd_string+0xc>
	{
	lcd_data(str[i]);//for incrimenting the data one by one untill null is found out
	i++;
	}
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	08 95       	ret

00000166 <lcd_number>:

void lcd_number(unsigned int value)
{   /*lcd_ number is used when the data to be displayed is gnerated automatically by some internal functions of controllers like the analog values of sensors converted by the adc of controllers automatically/internally */
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	ec 01       	movw	r28, r24
	unsigned int d=0;
	lcd_command(0x04);	//auto decrement mode
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>

	if(value==0)
 172:	20 97       	sbiw	r28, 0x00	; 0
 174:	91 f4       	brne	.+36     	; 0x19a <lcd_number+0x34>
	lcd_data(value+48);
 176:	80 e3       	ldi	r24, 0x30	; 48
 178:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
 17c:	0e c0       	rjmp	.+28     	; 0x19a <lcd_number+0x34>

	while(value!=0)
	{
	d=value%10;
	lcd_data(d+48);
 17e:	ce 01       	movw	r24, r28
 180:	6a e0       	ldi	r22, 0x0A	; 10
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	0e 94 93 01 	call	0x326	; 0x326 <__udivmodhi4>
 188:	80 5d       	subi	r24, 0xD0	; 208
 18a:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
	value=value/10;
 18e:	ce 01       	movw	r24, r28
 190:	6a e0       	ldi	r22, 0x0A	; 10
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	0e 94 93 01 	call	0x326	; 0x326 <__udivmodhi4>
 198:	eb 01       	movw	r28, r22
	lcd_command(0x04);	//auto decrement mode

	if(value==0)
	lcd_data(value+48);

	while(value!=0)
 19a:	20 97       	sbiw	r28, 0x00	; 0
 19c:	81 f7       	brne	.-32     	; 0x17e <lcd_number+0x18>
	{
	d=value%10;
	lcd_data(d+48);
	value=value/10;
	}
	lcd_command(0x06);	//auto increment mode
 19e:	86 e0       	ldi	r24, 0x06	; 6
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <keyscan>:
}
//*****************************************SUBROTINE************************************************


unsigned char keyscan()
{
 1aa:	7e e0       	ldi	r23, 0x0E	; 14
 1ac:	20 e1       	ldi	r18, 0x10	; 16
 1ae:	37 e2       	ldi	r19, 0x27	; 39
	  _delay_ms(100);
	   return'4';}
	if((PINA&0b00000100)==0){while(!(PINA&0b00000100)); return '1';}
	if((PINA&0b00001000)==0){while(!(PINA&0b00001000)); return '3';}

	PORTD = 0X0d;//switch no. two is taken as ground/reference
 1b0:	6d e0       	ldi	r22, 0x0D	; 13
	if((PINA&0b00000100)==0){while(!(PINA&0b00000100));PORTC=0b00010000;
	_delay_ms(100);
	  return '2';}
	if((PINA&0b00001000)==0){while(!(PINA&0b00001000)); return '0';}

	PORTD = 0X0b;//switch no. three is taken as reference
 1b2:	5b e0       	ldi	r21, 0x0B	; 11
	_delay_ms(100);
	  return '6';}
	if((PINA&0b00000100)==0){while(!(PINA&0b00000100)); return '3';}
	if((PINA&0b00001000)==0){while(!(PINA&0b00001000)); return '=';}											

	PORTD = 0X07;//switch no.four is taken as reference
 1b4:	47 e0       	ldi	r20, 0x07	; 7

unsigned char keyscan()
{
		while(1)
	{
	PORTD = 0X0e;// switch no. is taken as reference or ground
 1b6:	72 bb       	out	0x12, r23	; 18
 1b8:	c9 01       	movw	r24, r18
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <keyscan+0x10>
	_delay_ms(5);  /////must for response at porta when key press
	if((PINA&0b00000001)==0){ return '7';}
 1be:	c8 99       	sbic	0x19, 0	; 25
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <keyscan+0x1c>
 1c2:	87 e3       	ldi	r24, 0x37	; 55
 1c4:	08 95       	ret
	if((PINA&0b00000010)==0){while(!(PINA&0b00000010));PORTC=0b10100000;
 1c6:	c9 99       	sbic	0x19, 1	; 25
 1c8:	0f c0       	rjmp	.+30     	; 0x1e8 <keyscan+0x3e>
 1ca:	c9 9b       	sbis	0x19, 1	; 25
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <keyscan+0x20>
 1ce:	80 ea       	ldi	r24, 0xA0	; 160
 1d0:	85 bb       	out	0x15, r24	; 21
 1d2:	88 ee       	ldi	r24, 0xE8	; 232
 1d4:	93 e0       	ldi	r25, 0x03	; 3
 1d6:	28 ec       	ldi	r18, 0xC8	; 200
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	f9 01       	movw	r30, r18
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <keyscan+0x32>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1e2:	d9 f7       	brne	.-10     	; 0x1da <keyscan+0x30>
 1e4:	84 e3       	ldi	r24, 0x34	; 52
 1e6:	08 95       	ret
	  _delay_ms(100);
	   return'4';}
	if((PINA&0b00000100)==0){while(!(PINA&0b00000100)); return '1';}
 1e8:	ca 99       	sbic	0x19, 2	; 25
 1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <keyscan+0x4a>
 1ec:	ca 9b       	sbis	0x19, 2	; 25
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <keyscan+0x42>
 1f0:	81 e3       	ldi	r24, 0x31	; 49
 1f2:	08 95       	ret
	if((PINA&0b00001000)==0){while(!(PINA&0b00001000)); return '3';}
 1f4:	cb 99       	sbic	0x19, 3	; 25
 1f6:	03 c0       	rjmp	.+6      	; 0x1fe <keyscan+0x54>
 1f8:	cb 9b       	sbis	0x19, 3	; 25
 1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <keyscan+0x4e>
 1fc:	74 c0       	rjmp	.+232    	; 0x2e6 <keyscan+0x13c>

	PORTD = 0X0d;//switch no. two is taken as ground/reference
 1fe:	62 bb       	out	0x12, r22	; 18
 200:	c9 01       	movw	r24, r18
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <keyscan+0x58>
	_delay_ms(5);
	if((PINA&0b00000001)==0){while(!(PINA&0b00000001)); PORTC=0b01010000;
 206:	c8 99       	sbic	0x19, 0	; 25
 208:	0f c0       	rjmp	.+30     	; 0x228 <keyscan+0x7e>
 20a:	c8 9b       	sbis	0x19, 0	; 25
 20c:	fe cf       	rjmp	.-4      	; 0x20a <keyscan+0x60>
 20e:	80 e5       	ldi	r24, 0x50	; 80
 210:	85 bb       	out	0x15, r24	; 21
 212:	88 ee       	ldi	r24, 0xE8	; 232
 214:	93 e0       	ldi	r25, 0x03	; 3
 216:	28 ec       	ldi	r18, 0xC8	; 200
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	f9 01       	movw	r30, r18
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <keyscan+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 220:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 222:	d9 f7       	brne	.-10     	; 0x21a <keyscan+0x70>
 224:	88 e3       	ldi	r24, 0x38	; 56
 226:	08 95       	ret
	_delay_ms(100);
	return '8';}
	if((PINA&0b00000010)==0){while(!(PINA&0b00000010)); return '5';}
 228:	c9 99       	sbic	0x19, 1	; 25
 22a:	04 c0       	rjmp	.+8      	; 0x234 <keyscan+0x8a>
 22c:	c9 9b       	sbis	0x19, 1	; 25
 22e:	fe cf       	rjmp	.-4      	; 0x22c <keyscan+0x82>
 230:	85 e3       	ldi	r24, 0x35	; 53
 232:	08 95       	ret
	if((PINA&0b00000100)==0){while(!(PINA&0b00000100));PORTC=0b00010000;
 234:	ca 99       	sbic	0x19, 2	; 25
 236:	0f c0       	rjmp	.+30     	; 0x256 <keyscan+0xac>
 238:	ca 9b       	sbis	0x19, 2	; 25
 23a:	fe cf       	rjmp	.-4      	; 0x238 <keyscan+0x8e>
 23c:	80 e1       	ldi	r24, 0x10	; 16
 23e:	85 bb       	out	0x15, r24	; 21
 240:	88 ee       	ldi	r24, 0xE8	; 232
 242:	93 e0       	ldi	r25, 0x03	; 3
 244:	28 ec       	ldi	r18, 0xC8	; 200
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	f9 01       	movw	r30, r18
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <keyscan+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 24e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 250:	d9 f7       	brne	.-10     	; 0x248 <keyscan+0x9e>
 252:	82 e3       	ldi	r24, 0x32	; 50
 254:	08 95       	ret
	_delay_ms(100);
	  return '2';}
	if((PINA&0b00001000)==0){while(!(PINA&0b00001000)); return '0';}
 256:	cb 99       	sbic	0x19, 3	; 25
 258:	04 c0       	rjmp	.+8      	; 0x262 <keyscan+0xb8>
 25a:	cb 9b       	sbis	0x19, 3	; 25
 25c:	fe cf       	rjmp	.-4      	; 0x25a <keyscan+0xb0>
 25e:	80 e3       	ldi	r24, 0x30	; 48
 260:	08 95       	ret

	PORTD = 0X0b;//switch no. three is taken as reference
 262:	52 bb       	out	0x12, r21	; 18
 264:	c9 01       	movw	r24, r18
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <keyscan+0xbc>
	_delay_ms(5);
	if((PINA&0b00000001)==0){while(!(PINA&0b00000001)); return '9';}
 26a:	c8 99       	sbic	0x19, 0	; 25
 26c:	04 c0       	rjmp	.+8      	; 0x276 <keyscan+0xcc>
 26e:	c8 9b       	sbis	0x19, 0	; 25
 270:	fe cf       	rjmp	.-4      	; 0x26e <keyscan+0xc4>
 272:	89 e3       	ldi	r24, 0x39	; 57
 274:	08 95       	ret
	if((PINA&0b00000010)==0){while(!(PINA&0b00000010)); PORTC=0b01000000;
 276:	c9 99       	sbic	0x19, 1	; 25
 278:	0f c0       	rjmp	.+30     	; 0x298 <keyscan+0xee>
 27a:	c9 9b       	sbis	0x19, 1	; 25
 27c:	fe cf       	rjmp	.-4      	; 0x27a <keyscan+0xd0>
 27e:	80 e4       	ldi	r24, 0x40	; 64
 280:	85 bb       	out	0x15, r24	; 21
 282:	88 ee       	ldi	r24, 0xE8	; 232
 284:	93 e0       	ldi	r25, 0x03	; 3
 286:	28 ec       	ldi	r18, 0xC8	; 200
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	f9 01       	movw	r30, r18
 28c:	31 97       	sbiw	r30, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <keyscan+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 290:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 292:	d9 f7       	brne	.-10     	; 0x28a <keyscan+0xe0>
 294:	86 e3       	ldi	r24, 0x36	; 54
 296:	08 95       	ret
	_delay_ms(100);
	  return '6';}
	if((PINA&0b00000100)==0){while(!(PINA&0b00000100)); return '3';}
 298:	ca 99       	sbic	0x19, 2	; 25
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <keyscan+0xf8>
 29c:	ca 9b       	sbis	0x19, 2	; 25
 29e:	fe cf       	rjmp	.-4      	; 0x29c <keyscan+0xf2>
 2a0:	22 c0       	rjmp	.+68     	; 0x2e6 <keyscan+0x13c>
	if((PINA&0b00001000)==0){while(!(PINA&0b00001000)); return '=';}											
 2a2:	cb 99       	sbic	0x19, 3	; 25
 2a4:	04 c0       	rjmp	.+8      	; 0x2ae <keyscan+0x104>
 2a6:	cb 9b       	sbis	0x19, 3	; 25
 2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <keyscan+0xfc>
 2aa:	8d e3       	ldi	r24, 0x3D	; 61
 2ac:	08 95       	ret

	PORTD = 0X07;//switch no.four is taken as reference
 2ae:	42 bb       	out	0x12, r20	; 18
 2b0:	c9 01       	movw	r24, r18
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <keyscan+0x108>
	_delay_ms(5);
	if((PINA&0b00000001)==0){while(!(PINA&0b00000001)); return '/';}
 2b6:	c8 99       	sbic	0x19, 0	; 25
 2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <keyscan+0x118>
 2ba:	c8 9b       	sbis	0x19, 0	; 25
 2bc:	fe cf       	rjmp	.-4      	; 0x2ba <keyscan+0x110>
 2be:	8f e2       	ldi	r24, 0x2F	; 47
 2c0:	08 95       	ret
	if((PINA&0b00000010)==0){while(!(PINA&0b00000010)); return 'x';}
 2c2:	c9 99       	sbic	0x19, 1	; 25
 2c4:	04 c0       	rjmp	.+8      	; 0x2ce <keyscan+0x124>
 2c6:	c9 9b       	sbis	0x19, 1	; 25
 2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <keyscan+0x11c>
 2ca:	88 e7       	ldi	r24, 0x78	; 120
 2cc:	08 95       	ret
	if((PINA&0b00000100)==0){while(!(PINA&0b00000100)); return '-';}
 2ce:	ca 99       	sbic	0x19, 2	; 25
 2d0:	04 c0       	rjmp	.+8      	; 0x2da <keyscan+0x130>
 2d2:	ca 9b       	sbis	0x19, 2	; 25
 2d4:	fe cf       	rjmp	.-4      	; 0x2d2 <keyscan+0x128>
 2d6:	8d e2       	ldi	r24, 0x2D	; 45
 2d8:	08 95       	ret
    if((PINA&0b00001000)==0){while(!(PINA&0b00001000)); return '+';}
 2da:	cb 99       	sbic	0x19, 3	; 25
 2dc:	6c cf       	rjmp	.-296    	; 0x1b6 <keyscan+0xc>
 2de:	cb 9b       	sbis	0x19, 3	; 25
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <keyscan+0x134>
 2e2:	8b e2       	ldi	r24, 0x2B	; 43
 2e4:	08 95       	ret
 2e6:	83 e3       	ldi	r24, 0x33	; 51

	}	  
}
 2e8:	08 95       	ret

000002ea <main>:
#include<util/delay.h>
#include<lcdavr.h>

unsigned char keyscan();
int main()
{	
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
    
	DDRA = 0X00;
 2ee:	1a ba       	out	0x1a, r1	; 26
	DDRD = 0XFF;
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	81 bb       	out	0x11, r24	; 17
	DDRC=0XFF;
 2f4:	84 bb       	out	0x14, r24	; 20
	PORTA= 0XFF;
 2f6:	8b bb       	out	0x1b, r24	; 27
	DDRB = 0XFF;
 2f8:	87 bb       	out	0x17, r24	; 23
	lcd_init();
 2fa:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_init>
	
	lcd_command(0x80);
 2fe:	80 e8       	ldi	r24, 0x80	; 128
 300:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_string("data");
 304:	80 e6       	ldi	r24, 0x60	; 96
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_string>
	lcd_command(0xc0);
 30c:	80 ec       	ldi	r24, 0xC0	; 192
 30e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 312:	c0 e2       	ldi	r28, 0x20	; 32
 314:	de e4       	ldi	r29, 0x4E	; 78
	


	while(1)
	{
	lcd_data(keyscan());
 316:	0e 94 d5 00 	call	0x1aa	; 0x1aa <keyscan>
 31a:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_data>
 31e:	ce 01       	movw	r24, r28
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <main+0x36>
 324:	f8 cf       	rjmp	.-16     	; 0x316 <main+0x2c>

00000326 <__udivmodhi4>:
 326:	aa 1b       	sub	r26, r26
 328:	bb 1b       	sub	r27, r27
 32a:	51 e1       	ldi	r21, 0x11	; 17
 32c:	07 c0       	rjmp	.+14     	; 0x33c <__udivmodhi4_ep>

0000032e <__udivmodhi4_loop>:
 32e:	aa 1f       	adc	r26, r26
 330:	bb 1f       	adc	r27, r27
 332:	a6 17       	cp	r26, r22
 334:	b7 07       	cpc	r27, r23
 336:	10 f0       	brcs	.+4      	; 0x33c <__udivmodhi4_ep>
 338:	a6 1b       	sub	r26, r22
 33a:	b7 0b       	sbc	r27, r23

0000033c <__udivmodhi4_ep>:
 33c:	88 1f       	adc	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	5a 95       	dec	r21
 342:	a9 f7       	brne	.-22     	; 0x32e <__udivmodhi4_loop>
 344:	80 95       	com	r24
 346:	90 95       	com	r25
 348:	bc 01       	movw	r22, r24
 34a:	cd 01       	movw	r24, r26
 34c:	08 95       	ret

0000034e <_exit>:
 34e:	f8 94       	cli

00000350 <__stop_program>:
 350:	ff cf       	rjmp	.-2      	; 0x350 <__stop_program>
